#Dynamic Programming

This file has some common DP solvable problems.
--LCS is Longest Common subsequence problem, given two strings, we need to find the longest subsequence between them. A subsequence is formed by picking 
  0 or more characters in order from a string or an array.
--In Coin change problem we have some given coins and a sum and we need to find number of ways that sum can be obtained.
--Edit distance problem has two strings and we need to find minimum total operations that should be done to convert str1 to str2. Operation can be  deletion, 
  insertion or replacing of a charcter.
--In LIS problem, we have an array and we need to print Longest increasing subsequence in it. It is solved with DP as well as divide and conqer.
--Min Coins problem has an array of coins and we need to make a value form them using minimum coins.
--Min jumps problem gives us an array and we need to find in how many min jumps we can reach from 0th index to last index, Where we start from 0 and when on an
  index we can make jumps to (index, index + arr[index]) cells.
--0/1 Knapsack problem is same as the fractional knapsack except that now we can only put an item or not put it, no fractions allowed.
--Card Game is a very tricky dp problem where there are even number of cards placed with each card having a number on it. We have to pick the cards from either end 
  of the card stack and then our opponents pick, we need to have the maximum possible sum assuming that our opponent is as smart as us and we get to pick first.
--In Egg Dropping problem, we have some eggs and a number of floors, we need to find the threshold floor from where dropping the egg will break it but from each 
  floor below it, the egg does not break on dropping, our problem is to find minimum number of drops we make to determine it.
--In BST count problem we are given a number of nodes n and we need to find the maximum number of BST we can form from those nodes, the dp implementation is not the
  best for this problem instead the catlan number can solve it in O(n) time but we still do it using dp as it is interesting.
--Subset sum problem has an array and we need to find the maximum sum that can be obtained from the some elements of this array without taking in two consecutive elements.
--Matrix chain multiplication has an array where each two adjacent numbers tell us the dimensions of a matrix. We have to multiply these matrices but we need to
  do it in a way that the number of elemnts multiplied is minimized. ex-- [4, 2, 7] means we multiply a 4*2 matrix with a 2*7 matrix and we will have to multiply all
  elements as there are only two matrices and no other way possible.
